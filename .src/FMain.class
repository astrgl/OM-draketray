' Gambas class file

'PROCESSO DI SISTEMA*******************************
Public $hProcess As Process         'PORCESSO DI SISTEMA IL CUORE DEL PROGRAMMA
Public $sText As String             'VARIABILE PER PER LOSTREAMING DEL PROCESSO 
Public $WORDUPDATE As String        'VARIABILE IN CUI VIENE SCRITTA LA PAROLA CHIAVE PER INDIVIDUARE AGGIORNAMENTI DI DFNDRAKE
Public $TMRUPDATEVENT As Integer    'VARIABILE PER RITARDARE LA VERIFICA DI AGGIORMANETI ALL'AVVIODI 180SECONDI NEL TIMER
Public $LANG As String              'VARIABILE PER LA LINGUA DI SISTEMA
Public $DNFDRAKECHECK As Integer    'VARIABILE CHE INDICA SE ABILITARE LA VERIFICA DI AGGIORNAMENTI PER DNFDRAKE 
Public $FLATDRAKECHECK As Integer   'VARIABILE CHE INDICA SE ABILITARE LA VERIFICA DI AGGIORNAMENTI PER FLATDRAKE
Public $LOCKTRAY As Integer         'VARIABILE CHE INDICA LO STATO DEGLI AGGIORNAMENTI (0=NO UPDATES 1=DNF UPDATES 2=FALPAK UPDATES)
Public $CONFIG As Integer        'VARIABILE CHE INDICA LO STATO DELLA CONFIGURAZIONE DEGLI AGGIORNAMENTI (0=NO 1=DNFDRAKE 2=FALPAKDRALE 3=ALL)
'Public $LOCK As Integer
bAperto As Boolean

'RISOLUZIONE**************************************
Public $RISOLUZIONE As String
Public $RISOLUZIONEX As Integer
Public $RISOLUZIONEY As Integer
'APERTURA PROGRAMMA E COMANDI ESEGUITI*******************************************************

Public Sub Form_Open()
  
  RESOLUTION
 'parole chiave
 Dim flKEY As File  
 Dim jKEY As Byte
 Dim s$KEY As String
 Dim ss$KEY As New String[]
 'AVVIO PROCESSO DI SISTEMA*****************************************************************
 $hProcess = Exec ["bash", "--noediting"] For Input Output As "Process"
 
 'MODULO PER EVITARE L'AVVIO DI PIÙ ISTANZE DEL PROGRAMMA************************************
 Dim $LOCK As String
 Dim $LOCKVAL As Integer
  
  Shell "ps aux | grep gbr3 | grep -w draketray.gambas | wc -l" Wait To $LOCK 
  $LOCKVAL = CInteger(Val(Right(Left($LOCK))))
  If $LOCKVAL > 2 Then
    Quit 
  Endif 
   'controllo esistenza delle directory del programma***************************************************
   If Not Exist(User.Home &/ ".config/draketray/") Then
      Mkdir User.Home &/ "/.config/draketray/"
   Endif
 'lettura della lingua di sistema************************************************************
 
 txtlang.Text = Left(Right(System.Language, -3), 2)
 $LANG = Left(System.Language, 5)
 
 'CARICAMENTO INGLESE SE LA LINGUA DI SISTEMA NON È SUPPORTATA*******************************
 If $LANG = "it_IT" Or $LANG = "fr_FR" Or $LANG = "en_US" Or $LANG = "pl_PL" Or $LANG = "en_GB" Or $LANG = "br_BR" Or $LANG = "es_ES" Or $LANG = "de_DE" Or $LANG = "ca_ES" Then 

 Else
   txtlang.Text = "US" 
   $LANG = "en_US"
   Print #$hProcess, "LANG=en_US.UTF-8" & gb.NewLine;
   Wait 0.1
   Print #$hProcess, "LANGUAGE=en_US.UTF-8" & gb.NewLine;
   Wait 0.1
   Print #$hProcess, "LC_COLLATE=C" & gb.NewLine;
   Wait 0.1
   Print #$hProcess, "LC_CTYPE=en_US.UTF-8" & gb.NewLine;
   'Message.Info("Your language is unavailable.The interface will change to fallback EN-US", "OK")
 Endif
  
 
 'VERIFICA SE DNFDRAKE E FLATDRAKE SONO INSTALLATE******************************
  
  If Not Exist(User.Home &/ ".config/draketray/config") Then
      If Exist("/usr/bin/dnfdrake.gambas") Then
         $DNFDRAKECHECK = 1
      Else 
         $DNFDRAKECHECK = 0
      Endif
  
      If Exist("/usr/bin/flatdrake.gambas") Then
         $FLATDRAKECHECK = 1
      Else 
         $FLATDRAKECHECK = 0
      Endif  
      
    If $DNFDRAKECHECK = 0 And If $FLATDRAKECHECK = 0 Then
       File.Save(User.Home &/ "/.config/draketray/config", "0")
    Else If $DNFDRAKECHECK = 1 And If $FLATDRAKECHECK = 0
       File.Save(User.Home &/ "/.config/draketray/config", "1")    
    Else If $DNFDRAKECHECK = 0 And If $FLATDRAKECHECK = 1
       File.Save(User.Home &/ "/.config/draketray/config", "2")
    Else If $DNFDRAKECHECK = 1 And If $FLATDRAKECHECK = 1
       File.Save(User.Home &/ "/.config/draketray/config", "3")
    Endif 
    If Not Exist(User.Home &/ ".config/autostart/draketray.desktop") Then
      If Not Exist(User.Home &/ ".config/autostart") Then
         Shell ("mkdir " & User.Home &/ ".config/autostart")
      Endif
      Shell ("cp /usr/share/draketray/draketray.desktop  " & User.Home &/ ".config/autostart/")    
    Endif 
    $CONFIG = Val(File.Load(User.Home &/ "/.config/draketray/config"))
  Else 
   
     $CONFIG = Val(File.Load(User.Home &/ "/.config/draketray/config"))
    If Exist("/usr/bin/dnfdrake.gambas") And If ($CONFIG = 1 Or $CONFIG = 3) Then
       $DNFDRAKECHECK = 1
       'Message.Info("DNF-OK", "OK")
    Else 
       $DNFDRAKECHECK = 0
    Endif
  
    If Exist("/usr/bin/flatdrake.gambas") And If ($CONFIG = 2 Or $CONFIG = 3) Then
       $FLATDRAKECHECK = 1
       'Message.Info("FLAT-OK", "OK")
    Else 
       $FLATDRAKECHECK = 0
    Endif                
  Endif
  
'PAROLE CHIAVE*******************************************************************
  If Not Exist("/usr/share/dnfdrake/dnfdrake-KEY-" & $LANG) Then
      Message.Info("Your language is unavailable, DnfDrakeTray and have been disable!", "Ok")
      Shell ("rm -f " & User.Home &/ ".config/autostart/dnfdraketray.gambas.desktop")
      Quit  
  Else  
      flKEY = Open "/usr/share/dnfdrake/dnfdrake-KEY-" & $LANG For Read   ' ...oppure "Input"
        While Not Eof(flKEY)
          Input #flKEY, s$KEY
          ss$KEY.Add(s$KEY)
        Wend
      Close #flKEY
      For jKEY = 0 To ss$KEY.Max
          $WORDUPDATE = Replace(ss$KEY[3], "_", " ") 'KEY PER VERIFICA DISPONIBILITÀ AGGIORNAMENTI
      Next
      flKEY.Close
'*************************************************************************************
   TrayIcon1.Icon = Picture.Load("draketray.svg")
   TrayIcon1.Tooltip = "DrakeTray"
   TrayIcon1.Show
   TrayIcon1_Click
   TMRSTART.Enabled = True
   TMRUPDATE.Enabled = True
   bAperto = True
   File.Save(User.Home &/ "/.config/draketray/locktray", "0")
   BTNCONFIG.Picture = Picture.Load("/usr/share/draketray/config.png")
   BTNCHECK.Picture = Picture.Load("/usr/share/draketray/refresh.png")
   BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/ricorda.png")
   BTNINFO.Picture = Picture.Load("/usr/share/draketray/info.png")
   BTNQUIT.Picture = Picture.Load("/usr/share/draketray/close.png")
   
  Endif 
  
End

'CHIUSURA PROGRAMMA*******************************************************


Public Sub Form_close() 
$hProcess.Kill
Shell ("rm -f " & User.Home &/ ".config/draketray/locktray")
TrayIcon1.Delete
End 
'PROCESSO DI SISTEMA*******************************************************End

Public Sub Process_Read()
  Dim sStr As String
 
  Read #$hProcess, sStr, -2560 '-2560 sembra risolvere i problemi in listpkg e i blocchi durante i comandi
  $sText = $sText & sStr
'VERIFICA AGGIORNAMENTI DNFDRAKE*******************************************
  If InStr($sText, $WORDUPDATE) > 0 Then                          
    File.Save(User.Home &/ "/.config/draketray/locktray", "1")
    TrayIcon1.Icon = Picture.Load("dnfdrake.svg")
    BTNDNFDRAKE.Enabled = True
    TrayIcon1.Tooltip = "DnfDrakeTray"
    TrayIcon1.Show
    TXTMESSAGE.Text = "Updates Available!"
    FMain.Show
    BTNFLATDRAKE.Visible = False
    bAperto = True
    TMRSTART.Delay = 5000
    TMRSTART.Enabled = True
    $sText = ""
    TMRUPDATE.Enabled = False
    TMRUPDATE.Delay = 7200000
    TMRUPDATE.Enabled = True
    If $DNFDRAKECHECK = 1 And If $FLATDRAKECHECK = 1 Then
     BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/prossimo.png")
     BTNCLOSE.Tooltip = "Look for other updates"
     BTNDNFDRAKE.SetFocus
    Endif
  Endif
'VERIFICA AGGIORNAMENTI FLATDRAKE*******************************************
  If InStr($sText, "Proceed") Or If InStr($sText, "install") > 0 Then 
    If InStr($sText, "[Y/n]") Then
       Print #$hProcess, "N" & gb.NewLine; 
    Endif
    File.Save(User.Home &/ "/.config/draketray/locktray", "2")
    TrayIcon1.Icon = Picture.Load("flatdrake.svg")
    BTNFLATDRAKE.Enabled = True
    TrayIcon1.Tooltip = "FlatDrakeTray"
    TrayIcon1.Show
    TXTMESSAGE.Text = "Updates Available!"
    FMain.Show
    BTNFLATDRAKE.Visible = True
    bAperto = True
    TMRSTART.Delay = 5000
    TMRSTART.Enabled = True
    $sText = ""
    Print #$hProcess, "N" & gb.NewLine;  
    TMRUPDATE.Enabled = False
    TMRUPDATE.Delay = 7200000
    TMRUPDATE.Enabled = True
    If $DNFDRAKECHECK = 1 And If $FLATDRAKECHECK = 1 Then
     BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/ricorda.png")
     BTNCLOSE.Tooltip = "Remember later"
     BTNDNFDRAKE.SetFocus
    Endif
  Endif
 
End

'GESTIONE PULSANTI MOUSE SULLA TRAY******************************************
Public Sub TrayIcon1_Click()
  
  If bAperto = True Then 
     Me.Hide
     bAperto = False
   Else
     Me.Show
     bAperto = True
   Endif
 
End

Public Sub Form_LostFocus()
 TrayIcon1_Click
End 

Private Sub DNFDRAKE()
  Shell ("/usr/bin/dnfdrake.gambas")
  TXTMESSAGE.Text = "System Updated!"
  TrayIcon1.Icon = Picture.Load("draketray.svg")
  BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/ricorda.png")
  BTNDNFDRAKE.Enabled = False
End
Private Sub FLATDRAKE()
  Shell ("/usr/bin/flatdrake.gambas") 
  TXTMESSAGE.Text = "System Updated!"
  TrayIcon1.Icon = Picture.Load("draketray.svg")
  BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/ricorda.png") 
  BTNFLATDRAKE.Enabled = False
End
Private Sub UPGRADESDNFDRAKE()
'CONTROLLO SE SONO STATI INDIVIDUATI AGGIORNAMENI
 Dim flTRAY As File  
 Dim jTRAY As Byte
 Dim s$TRAY As String
 Dim ss$TRAY As New String[]
 If Exist(User.Home &/ "/.config/draketray/locktray") Then
    flTRAY = Open User.Home &/ ".config/draketray/locktray" For Read 
      While Not Eof(flTRAY)
        Input #flTRAY, s$TRAY
        ss$TRAY.Add(s$TRAY)
      Wend
    Close #flTRAY
      For jTRAY = 0 To ss$TRAY.Max
         $LOCKTRAY = Replace(ss$TRAY[0], "_", " ") 'VERIFICA STATO DISPONIBILITÀ AGGIORNAMENTI
      Next
      flTRAY.Close
 Endif      
'CONTROLLI PER DNFDRAKE******************************************************
If $DNFDRAKECHECK = 1 And If $LOCKTRAY <> 2 Then
  'VERIFICA SE DNFDRAKE È IN ESECUZIONE NEL CASO SALTA LA VERIFICA
   Dim $LOCK As String
   Dim $LOCKVAL As Integer
   Shell "ps aux | grep gbr3 | grep -w dnfdrake.gambas | wc -l" Wait To $LOCK 
   $LOCKVAL = CInteger(Val(Right(Left($LOCK))))
   If $LOCKVAL < 2 Then
'PRECARICAMENTO LISTE PER DNFDRAKE
   'Message.info("nuovo giro  " & $LOCKVAL, "ok")
      Shell "dnf list installed >" & User.Home &/ ".config/dnfdrake/installati.txt" Wait
      Shell "dnf list available >" & User.Home &/ ".config/dnfdrake/noninstallati.txt" Wait
      Shell "dnf list upgrades >" & User.Home &/ ".config/dnfdrake/updates.txt" Wait
'VERIFICA SE DISPONIBILI AGGIORNAMENTI 
      Print #$hProcess, "dnf list upgrades" & gb.NewLine; 
   Else 
   ' Message.info("salto giro  " & $LOCKVAL, "ok")  
  Endif    
    If $CONFIG = 2 Or If $CONFIG = 3 Then
       TMRUPDATE.Delay = 10000
    Else   
       TMRUPDATE.Delay = 7200000
    Endif
   'Message.Info(TMRUPDATE.Delay, "ok")
   $TMRUPDATEVENT = 2
Else 
   $TMRUPDATEVENT = 2
Endif

End 
Private Sub UPGRADESFLATDRAKE()
 'CONTROLLO SE SONO STATI INDIVIDUATI AGGIORNAMENI
 Dim flTRAY As File  
 Dim jTRAY As Byte
 Dim s$TRAY As String
 Dim ss$TRAY As New String[]
 If Exist(User.Home &/ "/.config/draketray/locktray") Then
      flTRAY = Open User.Home &/ ".config/draketray/locktray" For Read 
      While Not Eof(flTRAY)
        Input #flTRAY, s$TRAY
        ss$TRAY.Add(s$TRAY)
      Wend
    Close #flTRAY
      For jTRAY = 0 To ss$TRAY.Max
         $LOCKTRAY = Replace(ss$TRAY[0], "_", " ") 'VERIFICA STATO DISPONIBILITÀ AGGIORNAMENTI
      Next
      flTRAY.Close
  Endif 
  If $FLATDRAKECHECK = 1 And If $LOCKTRAY <> 1 Then
   Print #$hProcess, "flatpak update" & gb.NewLine;  
   TMRUPDATE.Delay = 7200000
   $TMRUPDATEVENT = 1
  Else 
   $TMRUPDATEVENT = 1
 Endif
  
  
End


'TIMER DI SISTEMA*************************************************************
Private Sub RESOLUTION()
  'POSIZIONAMENTO FINESTRA A TUTTE LE RISOLUZIONI
  Shell "xrandr --current |grep '*'" To $RISOLUZIONE
  $RISOLUZIONEX = Val(Str(Right(Left($risoluzione, 7), 4)))
  $RISOLUZIONEY = Val(Str(Right(Left($risoluzione, 12), 4)))
  FMain.X = FMain.X + ($RISOLUZIONEX - 1366)
  FMain.Y = FMain.Y + ($RISOLUZIONEY - 768)
End

Public Sub TMRSTART_Timer()

  If Not Exist(User.Home &/ ".config/draketray/locktray") Then
     File.Save(User.Home &/ "/.config/draketray/locktray", "0")
  Endif
  If bAperto = True Then
  TrayIcon1_Click  
  Endif
  
  TMRSTART.Enabled = False

End


'TIMER VERIFICA AGGIORNAMENTI****************************

Public Sub TMRUPDATE_Timer() 
 BTNCHECK.Enabled = True
 If $TMRUPDATEVENT = 0 Then
  $TMRUPDATEVENT = 1
  TrayIcon1.hide
  TMRUPDATE.Delay = 180000 
  'TMRUPDATE.Delay = 3000 'RIDOTTO PER TEST
  Else If $TMRUPDATEVENT = 1 Then
       UPGRADESDNFDRAKE
  Else If $TMRUPDATEVENT = 2 Then
       UPGRADESFLATDRAKE
  Endif
End

'ALTRI COMANDI*******************************************

Public Sub TXTMESSAGE_MouseDown()

End



Public Sub BTNDNFDRAKE_Click()
  DNFDRAKE
   Me.Hide
  TXTMESSAGE.Text = "System Updated!"
  TrayIcon1.hide
End

Public Sub BTNCLOSE_Click()
  File.Save(User.Home &/ "/.config/draketray/locktray", "0")
  TXTMESSAGE.Text = "System Updated!"
  TrayIcon1.Icon = Picture.Load("draketray.svg")
  TrayIcon1.Tooltip = "DrakeTray"
  BTNCLOSE.Picture = Picture.Load("/usr/share/draketray/ricorda.png")
  BTNDNFDRAKE.Enabled = False
  BTNFLATDRAKE.Enabled = False
  TrayIcon1.hide
  TrayIcon1_Click
  TMRUPDATE.Enabled = False
  If BTNFLATDRAKE.Visible = True Or If $FLATDRAKECHECK = 0 Then
     TMRUPDATE.Delay = 7200000
  Else    
     TMRUPDATE.Delay = 10000
  Endif

  TMRUPDATE.Enabled = True

End


Public Sub Spinner1_MouseDown()

  

End
Public Sub BTNCLOSE_MouseDown()

  If Mouse.Shift Then 
    Me.Close
  Endif   
    
End



Public Sub BTNCONFIG_Click()

  FCONFIG.Show

End

Public Sub BTNQUIT_Click()
  Dim $PID As String
  Dim iAnswer As Integer = Message.Question("Do you want to close DrakTray?", "Yes", "No")
      If (iAnswer = 1) Then
         Shell "ps aux | grep gbr3 | grep draketray" Wait To $PID
         $PID = Right(Left($PID, 16), 8)
         Shell "kill " & $PID
         Shell ("rm -f " & User.Home &/ ".config/draketray/locktray")
      Else
          Stop Event
      Endif 

End

Public Sub BTNINFO_Click()

  FABOUT.Show

End
Public Sub BTNFLATDRAKE_Click()
  FLATDRAKE
  Me.Hide
  TXTMESSAGE.Text = "System Updated!"
  TrayIcon1.hide
End


Public Sub BTNCHECK_Click()

  TMRUPDATE.Delay = 1
  BTNCHECK.Enabled = False
  TrayIcon1_Click  

End
Public Sub Label3_MouseDown()

End
